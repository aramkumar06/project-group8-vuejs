# Generated by Django 2.2.9 on 2020-01-30 09:05

from django.db import migrations, models


class Migration(migrations.Migration):

    dependencies = [
        ('dataServer', '0001_initial'),
    ]

    operations = [
        migrations.CreateModel(
            name='Category',
            fields=[
                ('cano', models.IntegerField(primary_key=True, serialize=False)),
                ('name', models.CharField(blank=True, max_length=100, null=True)),
                ('clickcount', models.IntegerField(blank=True, db_column='clickCount', null=True)),
                ('imagelink', models.CharField(blank=True, db_column='imageLink', max_length=1000, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'category',
            },
        ),
        migrations.CreateModel(
            name='CategoryYoutubeRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
            ],
            options={
                'managed': False,
                'db_table': 'category_youtube_relation',
            },
        ),
        migrations.CreateModel(
            name='Community',
            fields=[
                ('cono', models.AutoField(primary_key=True, serialize=False)),
                ('communityname', models.CharField(blank=True, db_column='communityName', max_length=100, null=True)),
                ('communityagegroup', models.CharField(blank=True, db_column='communityAgeGroup', max_length=100, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'community',
            },
        ),
        migrations.CreateModel(
            name='CommunityYoutuberRelation',
            fields=[
                ('id', models.AutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('mentioncount', models.IntegerField(blank=True, db_column='mentionCount', null=True)),
                ('updatedate', models.DateTimeField(blank=True, db_column='updateDate', null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'community_youtuber_relation',
            },
        ),
        migrations.CreateModel(
            name='Growth',
            fields=[
                ('gno', models.AutoField(primary_key=True, serialize=False)),
                ('recorddate', models.DateTimeField(blank=True, db_column='recordDate', null=True)),
                ('pointsubscriber', models.IntegerField(blank=True, db_column='pointSubscriber', null=True)),
                ('difsubscriber', models.IntegerField(blank=True, db_column='difSubscriber', null=True)),
                ('pointview', models.BigIntegerField(blank=True, db_column='pointView', null=True)),
                ('difview', models.IntegerField(blank=True, db_column='difView', null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'growth',
            },
        ),
        migrations.CreateModel(
            name='News',
            fields=[
                ('nno', models.AutoField(primary_key=True, serialize=False)),
                ('newslink', models.CharField(blank=True, db_column='newsLink', max_length=100, null=True)),
                ('newstitle', models.CharField(blank=True, db_column='newsTitle', max_length=100, null=True)),
                ('newsdescription', models.CharField(blank=True, db_column='newsDescription', max_length=1000, null=True)),
                ('newsdate', models.DateField(blank=True, db_column='newsDate', null=True)),
                ('pressname', models.CharField(blank=True, db_column='pressName', max_length=50, null=True)),
                ('clickcount', models.IntegerField(blank=True, db_column='clickCount', null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'news',
            },
        ),
        migrations.CreateModel(
            name='Video',
            fields=[
                ('vno', models.IntegerField(primary_key=True, serialize=False)),
                ('yno', models.IntegerField()),
                ('videoid', models.CharField(db_column='videoID', max_length=100)),
                ('videoname', models.CharField(db_column='videoName', max_length=100)),
                ('videodescription', models.CharField(blank=True, db_column='videoDescription', max_length=3000, null=True)),
                ('videoviewcount', models.IntegerField(db_column='videoViewCount')),
                ('videocommentcount', models.IntegerField(db_column='videoCommentCount')),
                ('good', models.IntegerField()),
                ('bad', models.IntegerField()),
                ('regdate', models.DateField(db_column='regDate')),
                ('ycano', models.IntegerField(blank=True, null=True)),
                ('tags', models.CharField(blank=True, max_length=1000, null=True)),
                ('thumbnail', models.CharField(max_length=1000)),
                ('topic', models.CharField(blank=True, max_length=100, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'video',
            },
        ),
        migrations.CreateModel(
            name='YoutubeCategory',
            fields=[
                ('ycano', models.IntegerField(primary_key=True, serialize=False)),
                ('encategory', models.CharField(db_column='enCategory', max_length=30)),
                ('krcategory', models.CharField(db_column='krCategory', max_length=30)),
            ],
            options={
                'managed': False,
                'db_table': 'youtube_category',
            },
        ),
        migrations.CreateModel(
            name='Youtuber',
            fields=[
                ('yno', models.AutoField(primary_key=True, serialize=False)),
                ('channelid', models.CharField(blank=True, db_column='channelID', max_length=100, null=True)),
                ('channelname', models.CharField(blank=True, db_column='channelName', max_length=100, null=True)),
                ('youtubername', models.CharField(blank=True, db_column='youtuberName', max_length=100, null=True)),
                ('channeldescription', models.CharField(blank=True, db_column='channelDescription', max_length=1000, null=True)),
                ('bannerimagelink', models.CharField(blank=True, db_column='bannerImageLink', max_length=1000, null=True)),
                ('channellink', models.CharField(blank=True, db_column='channelLink', max_length=1000, null=True)),
                ('thumbnails', models.CharField(blank=True, max_length=1000, null=True)),
                ('publisheddate', models.DateField(blank=True, db_column='publishedDate', null=True)),
                ('subscriber', models.IntegerField(blank=True, null=True)),
                ('totalviewcount', models.BigIntegerField(blank=True, db_column='totalViewCount', null=True)),
                ('totalvideocount', models.IntegerField(blank=True, db_column='totalVideoCount', null=True)),
                ('grade', models.CharField(blank=True, max_length=10, null=True)),
                ('influence', models.IntegerField(blank=True, null=True)),
                ('activity', models.IntegerField(blank=True, null=True)),
                ('growth', models.IntegerField(blank=True, null=True)),
                ('basicstat', models.IntegerField(blank=True, db_column='basicStat', null=True)),
                ('charm', models.IntegerField(blank=True, null=True)),
                ('clickcount', models.IntegerField(blank=True, db_column='clickCount', null=True)),
                ('updateddate', models.DateTimeField(blank=True, db_column='updatedDate', null=True)),
                ('regdate', models.DateField(blank=True, db_column='regDate', null=True)),
                ('otherlink1', models.CharField(blank=True, db_column='otherLink1', max_length=1000, null=True)),
                ('otherlink2', models.CharField(blank=True, db_column='otherLink2', max_length=1000, null=True)),
                ('otherlink3', models.CharField(blank=True, db_column='otherLink3', max_length=1000, null=True)),
                ('otherlink4', models.CharField(blank=True, db_column='otherLink4', max_length=1000, null=True)),
                ('otherlink5', models.CharField(blank=True, db_column='otherLink5', max_length=1000, null=True)),
            ],
            options={
                'managed': False,
                'db_table': 'youtuber',
            },
        ),
        migrations.DeleteModel(
            name='ColumnsPriv',
        ),
        migrations.DeleteModel(
            name='ColumnStats',
        ),
        migrations.DeleteModel(
            name='Db',
        ),
        migrations.DeleteModel(
            name='Event',
        ),
        migrations.DeleteModel(
            name='Func',
        ),
        migrations.DeleteModel(
            name='GeneralLog',
        ),
        migrations.DeleteModel(
            name='GlobalPriv',
        ),
        migrations.DeleteModel(
            name='GtidSlavePos',
        ),
        migrations.DeleteModel(
            name='HelpCategory',
        ),
        migrations.DeleteModel(
            name='HelpKeyword',
        ),
        migrations.DeleteModel(
            name='HelpRelation',
        ),
        migrations.DeleteModel(
            name='HelpTopic',
        ),
        migrations.DeleteModel(
            name='IndexStats',
        ),
        migrations.DeleteModel(
            name='InnodbIndexStats',
        ),
        migrations.DeleteModel(
            name='InnodbTableStats',
        ),
        migrations.DeleteModel(
            name='Plugin',
        ),
        migrations.DeleteModel(
            name='Proc',
        ),
        migrations.DeleteModel(
            name='ProcsPriv',
        ),
        migrations.DeleteModel(
            name='ProxiesPriv',
        ),
        migrations.DeleteModel(
            name='RolesMapping',
        ),
        migrations.DeleteModel(
            name='Servers',
        ),
        migrations.DeleteModel(
            name='SlowLog',
        ),
        migrations.DeleteModel(
            name='TablesPriv',
        ),
        migrations.DeleteModel(
            name='TableStats',
        ),
        migrations.DeleteModel(
            name='TimeZone',
        ),
        migrations.DeleteModel(
            name='TimeZoneLeapSecond',
        ),
        migrations.DeleteModel(
            name='TimeZoneName',
        ),
        migrations.DeleteModel(
            name='TimeZoneTransition',
        ),
        migrations.DeleteModel(
            name='TimeZoneTransitionType',
        ),
        migrations.DeleteModel(
            name='TransactionRegistry',
        ),
    ]
